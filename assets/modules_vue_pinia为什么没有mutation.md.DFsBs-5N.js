import{_ as i,c as e,o as n,j as a,a as t}from"./chunks/framework.CbocFKz0.js";const P=JSON.parse('{"title":"pinia 为什么没有 mutation","description":"","frontmatter":{},"headers":[],"relativePath":"modules/vue/pinia为什么没有mutation.md","filePath":"modules/vue/pinia为什么没有mutation.md"}'),o={name:"modules/vue/pinia为什么没有mutation.md"},s=a("h1",{id:"pinia-为什么没有-mutation",tabindex:"-1"},[t("pinia 为什么没有 mutation "),a("a",{class:"header-anchor",href:"#pinia-为什么没有-mutation","aria-label":'Permalink to "pinia 为什么没有 mutation"'},"​")],-1),l=a("h2",{id:"_1-设计理念和-vuex-的不同",tabindex:"-1"},[t("1. 设计理念和 Vuex 的不同 "),a("a",{class:"header-anchor",href:"#_1-设计理念和-vuex-的不同","aria-label":'Permalink to "1. 设计理念和 Vuex 的不同"'},"​")],-1),u=a("ul",null,[a("li",null,[a("p",null,"‌Pinia 没有 ‌mutation 的原因主要是因为其设计理念和 ‌Vuex 的不同。 Pinia 是一个轻量级的状态管理库，专注于提供简洁、高效的解决方案。它的核心特性包括只有 ‌state、‌getters 和 ‌actions，没有 mutation 的概念。‌")]),a("li",null,[a("p",null,"Pinia 中的 action 支持同步和异步操作，这使得开发者可以更灵活地处理状态更新。由于 action 的执行方式更加直接，不需要通过 mutation 来记录状态的改变，因此 Pinia 选择了去掉 mutation。这种设计使得代码更加简洁，减少了不必要的复杂性。‌")]),a("li",null,[a("p",null,"Pinia 的优势在于其轻量级、易于理解和使用。它提供了完整的 ‌TypeScript 支持，使得类型安全更加可靠。此外，Pinia 还支持多个 store，并且每个 store 都是独立的，这有助于更好的代码拆分和组织。‌")])],-1),r=[s,l,u];function c(m,_,d,p,h,x){return n(),e("div",null,r)}const v=i(o,[["render",c]]);export{P as __pageData,v as default};
